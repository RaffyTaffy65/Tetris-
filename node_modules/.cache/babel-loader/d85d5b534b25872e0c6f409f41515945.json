{"ast":null,"code":"export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\nexport const createStage = () => Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill([0, 'clear']));\nexport const checkCollision = (player, stage, {\n  x,\n  y\n}) => {\n  for (let a = 0; a < player.tetromino.length; a++) {\n    for (let b = 0; b < player.tetromino[a].length; b++) {\n      // 1. Check that we are on an actual tetromino cell\n      if (player.tetromino[a][b] !== 0) {\n        // 2. Check that movement is inside the game areas height\n        if (!stage[a + player.pos.y + y] || !stage[a + player.pos.y + y][b + player.pos.x + x] || stage[a + player.pos.y + y][b + player.pos.x + x][1] !== 'clear') {\n          return true;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/R.1/Documents/GitHub/Tetris React Hooks/src/gameHelpers.js"],"names":["STAGE_WIDTH","STAGE_HEIGHT","createStage","Array","from","fill","checkCollision","player","stage","x","y","a","tetromino","length","b","pos"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,EAApB;AACP,OAAO,MAAMC,YAAY,GAAG,EAArB;AAEP,OAAO,MAAMC,WAAW,GAAG,MAC1BC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACF,YAAD,CAAhB,EAAgC,MAC/B,IAAIE,KAAJ,CAAUH,WAAV,EAAuBK,IAAvB,CAA4B,CAAC,CAAD,EAAI,OAAJ,CAA5B,CADD,CADM;AAKP,OAAO,MAAMC,cAAc,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgB;AAAEC,EAAAA,CAAF;AAAKC,EAAAA;AAAL,CAAhB,KAA6B;AAC1D,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,SAAP,CAAiBC,MAArC,EAA6CF,CAAC,EAA9C,EAAkD;AACjD,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAAM,CAACK,SAAP,CAAiBD,CAAjB,EAAoBE,MAAxC,EAAgDC,CAAC,EAAjD,EAAqD;AACpD;AACA,UAAIP,MAAM,CAACK,SAAP,CAAiBD,CAAjB,EAAoBG,CAApB,MAA2B,CAA/B,EAAkC;AACjC;AACA,YACC,CAACN,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWL,CAAf,GAAmBA,CAApB,CAAN,IACA,CAACF,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWL,CAAf,GAAmBA,CAApB,CAAL,CAA4BI,CAAC,GAAGP,MAAM,CAACQ,GAAP,CAAWN,CAAf,GAAmBA,CAA/C,CADD,IAEAD,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWL,CAAf,GAAmBA,CAApB,CAAL,CAA4BI,CAAC,GAAGP,MAAM,CAACQ,GAAP,CAAWN,CAAf,GAAmBA,CAA/C,EAAkD,CAAlD,MACC,OAJF,EAKE;AACD,iBAAO,IAAP;AACA;AACD;AACD;AACD;AACD,CAjBM","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n\tArray.from(Array(STAGE_HEIGHT), () =>\n\t\tnew Array(STAGE_WIDTH).fill([0, 'clear'])\n\t);\n\nexport const checkCollision = (player, stage, { x, y }) => {\n\tfor (let a = 0; a < player.tetromino.length; a++) {\n\t\tfor (let b = 0; b < player.tetromino[a].length; b++) {\n\t\t\t// 1. Check that we are on an actual tetromino cell\n\t\t\tif (player.tetromino[a][b] !== 0) {\n\t\t\t\t// 2. Check that movement is inside the game areas height\n\t\t\t\tif (\n\t\t\t\t\t!stage[a + player.pos.y + y] ||\n\t\t\t\t\t!stage[a + player.pos.y + y][b + player.pos.x + x] ||\n\t\t\t\t\tstage[a + player.pos.y + y][b + player.pos.x + x][1] !==\n\t\t\t\t\t\t'clear'\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}