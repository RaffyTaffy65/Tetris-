{"ast":null,"code":"import { useState, useEffect, useCallback } from 'react';\nexport const useGameStatus = rowsCleared => {\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n  const linePoints = [40, 100, 300, 1200];\n  const calcScore = useCallback(() => {\n    if (rowsCleared > 0) {\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n  return [score, setScore, rows, setRows, level, setLevel];\n};","map":{"version":3,"sources":["/Users/R.1/Documents/GitHub/Tetris-React-Custom-Hooks/src/hooks/useGameStatus.js"],"names":["useState","useEffect","useCallback","useGameStatus","rowsCleared","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","prev"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,OAAO,MAAMC,aAAa,GAAGC,WAAW,IAAI;AAC3C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC;AAEA,QAAMW,UAAU,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,IAAf,CAAnB;AAEA,QAAMC,SAAS,GAAGV,WAAW,CAAC,MAAM;AACnC,QAAIE,WAAW,GAAG,CAAlB,EAAqB;AACpBE,MAAAA,QAAQ,CAACO,IAAI,IAAIA,IAAI,GAAGF,UAAU,CAACP,WAAW,GAAG,CAAf,CAAV,IAA+BK,KAAK,GAAG,CAAvC,CAAhB,CAAR;AACAD,MAAAA,OAAO,CAACK,IAAI,IAAIA,IAAI,GAAGT,WAAhB,CAAP;AACA;AACD,GAL4B,EAK1B,CAACK,KAAD,EAAQE,UAAR,EAAoBP,WAApB,CAL0B,CAA7B;AAOAH,EAAAA,SAAS,CAAC,MAAM;AACfW,IAAAA,SAAS;AACT,GAFQ,EAEN,CAACA,SAAD,EAAYR,WAAZ,EAAyBC,KAAzB,CAFM,CAAT;AAIA,SAAO,CAACA,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwCC,QAAxC,CAAP;AACA,CAnBM","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n\tconst [score, setScore] = useState(0);\n\tconst [rows, setRows] = useState(0);\n\tconst [level, setLevel] = useState(0);\n\n\tconst linePoints = [40, 100, 300, 1200];\n\n\tconst calcScore = useCallback(() => {\n\t\tif (rowsCleared > 0) {\n\t\t\tsetScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n\t\t\tsetRows(prev => prev + rowsCleared);\n\t\t}\n\t}, [level, linePoints, rowsCleared]);\n\n\tuseEffect(() => {\n\t\tcalcScore();\n\t}, [calcScore, rowsCleared, score]);\n\n\treturn [score, setScore, rows, setRows, level, setLevel];\n};\n"]},"metadata":{},"sourceType":"module"}