{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { randomTetromino, TETROMINOS } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n\n  const rotate = (matrix, dir) => {\n    // Make the rows to columns\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); // Reverse each row to get a rotated matrix\n\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};","map":{"version":3,"sources":["/Users/R.1/Documents/GitHub/Tetris-/src/hooks/usePlayer.js"],"names":["useState","useCallback","randomTetromino","TETROMINOS","STAGE_WIDTH","checkCollision","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","length","updatePlayerPos","prev","resetPlayer"],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { randomTetromino, TETROMINOS } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n\tconst [player, setPlayer] = useState({\n\t\tpos: { x: 0, y: 0 },\n\t\ttetromino: TETROMINOS[0].shape,\n\t\tcollided: false\n\t});\n\n\tconst rotate = (matrix, dir) => {\n\t\t// Make the rows to columns\n\t\tconst rotatedTetro = matrix.map((_, index) =>\n\t\t\tmatrix.map(col => col[index])\n\t\t);\n\n\t\t// Reverse each row to get a rotated matrix\n\t\tif (dir > 0) return rotatedTetro.map(row => row.reverse());\n\t\treturn rotatedTetro.reverse();\n\t};\n\n\tconst playerRotate = (stage, dir) => {\n\t\tconst clonedPlayer = JSON.parse(JSON.stringify(player));\n\t\tclonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n\t\tconst pos = clonedPlayer.pos.x;\n\t\tlet offset = 1;\n\t\twhile (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n\t\t\tclonedPlayer.pos.x += offset;\n\t\t\toffset = -(offset + (offset > 0 ? 1 : -1));\n\n\t\t\tif (offset > clonedPlayer.tetromino[0].length) {\n\t\t\t\trotate(clonedPlayer.tetromino, -dir);\n\t\t\t\tclonedPlayer.pos.x = pos;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tsetPlayer(clonedPlayer);\n\t};\n\n\tconst updatePlayerPos = ({ x, y, collided }) => {\n\t\tsetPlayer(prev => ({\n\t\t\t...prev,\n\t\t\tpos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n\t\t\tcollided\n\t\t}));\n\t};\n\n\tconst resetPlayer = useCallback(() => {\n\t\tsetPlayer({\n\t\t\tpos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n\t\t\ttetromino: randomTetromino().shape,\n\t\t\tcollided: false\n\t\t});\n\t}, []);\n\n\treturn [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n"]},"metadata":{},"sourceType":"module"}