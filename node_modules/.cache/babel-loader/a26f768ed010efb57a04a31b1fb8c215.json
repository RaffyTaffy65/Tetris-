{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage => newStage.reduce((accum, row) => {\n      // findIndex return -1 if it doesn't find anything\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        accum.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return accum;\n      }\n\n      accum.push(row);\n      return accum;\n    }, []);\n\n    const updateStage = prevStage => {\n      // Flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); // Draw the tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      }); // Check if collided\n\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};","map":{"version":3,"sources":["/Users/R.1/Documents/GitHub/Tetris React Hooks/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","accum","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAChD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACE,WAAW,EAAZ,CAAlC;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACfQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AAEA,UAAMC,SAAS,GAAGC,QAAQ,IACzBA,QAAQ,CAACC,MAAT,CAAgB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC/B;AACA,UAAIA,GAAG,CAACC,SAAJ,CAAcC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAlC,MAAyC,CAAC,CAA9C,EAAiD;AAChDP,QAAAA,cAAc,CAACQ,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAd;AACAJ,QAAAA,KAAK,CAACK,OAAN,CACC,IAAIC,KAAJ,CAAUR,QAAQ,CAAC,CAAD,CAAR,CAAYS,MAAtB,EAA8BC,IAA9B,CAAmC,CAAC,CAAD,EAAI,OAAJ,CAAnC,CADD;AAGA,eAAOR,KAAP;AACA;;AACDA,MAAAA,KAAK,CAACS,IAAN,CAAWR,GAAX;AACA,aAAOD,KAAP;AACA,KAXD,EAWG,EAXH,CADD;;AAcA,UAAMU,WAAW,GAAGC,SAAS,IAAI;AAChC;AACA,YAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAV,CAAcX,GAAG,IACjCA,GAAG,CAACW,GAAJ,CAAQT,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADgB,CAAjB,CAFgC,CAMhC;;AACAZ,MAAAA,MAAM,CAACsB,SAAP,CAAiBC,OAAjB,CAAyB,CAACb,GAAD,EAAMc,CAAN,KAAY;AACpCd,QAAAA,GAAG,CAACa,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACzB,cAAID,KAAK,KAAK,CAAd,EAAiB;AAChBlB,YAAAA,QAAQ,CAACiB,CAAC,GAAGxB,MAAM,CAAC2B,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAG1B,MAAM,CAAC2B,GAAP,CAAWD,CAA1C,IAA+C,CAC9CD,KAD8C,EAE7C,GAAEzB,MAAM,CAAC4B,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAFM,CAA/C;AAIA;AACD,SAPD;AAQA,OATD,EAPgC,CAkBhC;;AACA,UAAI5B,MAAM,CAAC4B,QAAX,EAAqB;AACpB3B,QAAAA,WAAW;AACX,eAAOK,SAAS,CAACC,QAAD,CAAhB;AACA;;AAED,aAAOA,QAAP;AACA,KAzBD;;AA2BAJ,IAAAA,QAAQ,CAACU,IAAI,IAAIM,WAAW,CAACN,IAAD,CAApB,CAAR;AACA,GA7CQ,EA6CN,CAACb,MAAD,EAASC,WAAT,CA7CM,CAAT;AA+CA,SAAO,CAACC,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,CAAP;AACA,CApDM","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n\tconst [stage, setStage] = useState(createStage());\n\tconst [rowsCleared, setRowsCleared] = useState(0);\n\n\tuseEffect(() => {\n\t\tsetRowsCleared(0);\n\n\t\tconst sweepRows = newStage =>\n\t\t\tnewStage.reduce((accum, row) => {\n\t\t\t\t// findIndex return -1 if it doesn't find anything\n\t\t\t\tif (row.findIndex(cell => cell[0] === 0) === -1) {\n\t\t\t\t\tsetRowsCleared(prev => prev + 1);\n\t\t\t\t\taccum.unshift(\n\t\t\t\t\t\tnew Array(newStage[0].length).fill([0, 'clear'])\n\t\t\t\t\t);\n\t\t\t\t\treturn accum;\n\t\t\t\t}\n\t\t\t\taccum.push(row);\n\t\t\t\treturn accum;\n\t\t\t}, []);\n\n\t\tconst updateStage = prevStage => {\n\t\t\t// Flush the stage\n\t\t\tconst newStage = prevStage.map(row =>\n\t\t\t\trow.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n\t\t\t);\n\n\t\t\t// Draw the tetromino\n\t\t\tplayer.tetromino.forEach((row, y) => {\n\t\t\t\trow.forEach((value, x) => {\n\t\t\t\t\tif (value !== 0) {\n\t\t\t\t\t\tnewStage[y + player.pos.y][x + player.pos.x] = [\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t`${player.collided ? 'merged' : 'clear'}`\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Check if collided\n\t\t\tif (player.collided) {\n\t\t\t\tresetPlayer();\n\t\t\t\treturn sweepRows(newStage);\n\t\t\t}\n\n\t\t\treturn newStage;\n\t\t};\n\n\t\tsetStage(prev => updateStage(prev));\n\t}, [player, resetPlayer]);\n\n\treturn [stage, setStage, rowsCleared];\n};\n"]},"metadata":{},"sourceType":"module"}